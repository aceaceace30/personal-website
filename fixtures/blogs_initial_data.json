[{"model": "blogs.tag", "pk": 1, "fields": {"name": "Python", "color": "#E8F11C"}}, {"model": "blogs.tag", "pk": 2, "fields": {"name": "Django", "color": "#279531"}}, {"model": "blogs.tag", "pk": 3, "fields": {"name": "Javascript", "color": "#234FEA"}}, {"model": "blogs.tag", "pk": 4, "fields": {"name": "Jquery", "color": "#27FFF9"}}, {"model": "blogs.tag", "pk": 5, "fields": {"name": "AWS", "color": "#FFBC24"}}, {"model": "blogs.tag", "pk": 6, "fields": {"name": "NGINX", "color": "#FF37FD"}}, {"model": "blogs.tag", "pk": 7, "fields": {"name": "Git", "color": "#B7B7B7"}}, {"model": "blogs.tag", "pk": 8, "fields": {"name": "Heroku", "color": "#AF33FF"}}, {"model": "blogs.tag", "pk": 9, "fields": {"name": "Anime", "color": "#46ABFF"}}, {"model": "blogs.tag", "pk": 10, "fields": {"name": "Workout", "color": "#A7FF44"}}, {"model": "blogs.blog", "pk": 2, "fields": {"title": "10 Git Commands you use everyday", "slug": "10-git-commands-you-use-everyday", "cover": "blog_covers/top-10-git-commands.png", "content": "<p><strong>Git</strong> is really powerful for maintaining project files and working with large teams makes it easier. If you are a beginner developer, these are the&nbsp;<strong>10 Git commands</strong> you need to know.</p>\r\n\r\n<p><strong>1. git init</strong> - Initialize git in the working directory.<br />\r\nUsage: git init</p>\r\n\r\n<p><strong>2. git add -&nbsp;</strong>Adds the change in the working directory into the staging area. It tells git what files you want to include on your next commit.</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>git add mydirectory/myfile.html&nbsp;</td>\r\n\t\t\t<td>Adds the specific file only</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>git add mydirectory/</td>\r\n\t\t\t<td>Adds the directory and files inside</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>git add .</td>\r\n\t\t\t<td>Adds all the available files on the working directory</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p><br />\r\n<strong>3. git commit&nbsp;</strong>- Individual changes to a file/s, To keep track of what changes are made when and by who.<br />\r\nUsage: git commit -m &quot;My first commit&quot;<br />\r\n<br />\r\n<strong>4. git status</strong> - Shows the status of the working directory. What files or directories are added to the staging area, what files are being tracked, and not.</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>git status</td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>git status --ignored</td>\r\n\t\t\t<td>Include ignored files on displaying the status</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p><br />\r\n<strong>5. git pull&nbsp;</strong>-&nbsp;Incorporates changes from a remote repository into the current branch.</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>git pull</td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>git pull origin &lt;branchname&gt;</td>\r\n\t\t\t<td>Pulls the changes from the specified branch to your local branch</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p><br />\r\n<strong>6. git push</strong> - Incorporates locally committed changes to the specified branch.</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>git push</td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>git push origin &lt;brachname&gt;</td>\r\n\t\t\t<td>Push your changes to a specified branch name</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>git push origin --all</td>\r\n\t\t\t<td>Push all your local branches to remote branch</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p><br />\r\n<strong>7. git log</strong> - Displays the history of everything that has happened on the repository.</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>git log</td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>git log --oneline</td>\r\n\t\t\t<td>The difference is this condenses each commits to a single line</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>git log -&lt;amount&gt;</td>\r\n\t\t\t<td>Filters the commit to be shown to the number of amounts</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>git log --author=&lt;name&gt;</td>\r\n\t\t\t<td>Filter the commit to be shown to the author</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p><br />\r\n<strong>8. git branch</strong> - Creates a new branch inheriting from the branch you used the command.&nbsp;<br />\r\nUsage: git branch &lt;branch name&gt;<br />\r\n<br />\r\n<strong>9. git checkout</strong> - This lets you navigate to different branches from your local or origin repository<br />\r\nUsage: git checkout &lt;branch name&gt;<br />\r\n<br />\r\n<strong>10. git stash</strong> - Saves the latest changes that have not been committed.</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>git stash</td>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>git stash list</td>\r\n\t\t\t<td>Show list of stashes</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>git stash apply &lt;stash_id&gt;</td>\r\n\t\t\t<td>Apply the changes save from that stash. The stash_id is optional, if you don&#39;t specify it the latest stash will take effect.</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p><br />\r\n<br />\r\nThere you have it, Our 10 most basic git commands. Remember that git has many other commands that may help you on your development journey, You may take a look at their official website&nbsp;<a href=\"https://git-scm.com/\" target=\"_blank\">here</a>.<br />\r\n<br />\r\nThank you for your time reading.&nbsp;<img alt=\"smiley\" src=\"http://acedev30.pythonanywhere.com/static/ckeditor/ckeditor/plugins/smiley/images/regular_smile.png\" style=\"height:23px; width:23px\" title=\"smiley\" /></p>", "active": true, "created_by": 1, "updated_by": 1, "created_at": "2021-01-24T04:04:46.669Z", "updated_at": "2021-01-25T13:28:07.177Z"}}, {"model": "blogs.blog", "pk": 3, "fields": {"title": "Unit Testing with Django", "slug": "unit-testing-with-django", "cover": "blog_covers/software-testing.png", "content": "<p>For this post, we are gonna be talking about how and what to test in your Django application.</p>\r\n\r\n<p>Testing is always necessary to a software project because it&#39;s gonna save a lot of time especially when the project grows large. Can you&nbsp;imagine if you are trying to upgrade your project&#39;s package, you have to manually test everything to make sure everything is working as expected?&nbsp;That&#39;s a little bit exhausting because you might encounter a lot of bugs that you have to fix while you are testing instead of fixing right after you upgrade.</p>\r\n\r\n<p>Let&#39;s start with the&nbsp;demo, we will be using this website code to unit test the blog posting and displaying the details of the blog.</p>\r\n\r\n<p>The first thing you have to remember when creating unit tests is they should always be simple as possible. The second is to also test how well your application will behave for unexpected inputs and errors.</p>\r\n\r\n<p>Because our application is still small all we have to test is the&nbsp;<strong>models </strong>and&nbsp;<strong>views.</strong></p>\r\n\r\n<p>I like starting with the models since our views will also rely on them.</p>\r\n\r\n<p>Before anything else, the structure of the code is essential when you create your tests.&nbsp;The default structure for a Django app is you put your tests in a single file named tests.py but I like splitting the test per module so our tests would be more maintainable.&nbsp;We will have tests as our directory and files naming convention&nbsp;is test_&lt;name-of-module&gt;.py<br />\r\n<br />\r\nWe end up having something that looks&nbsp;like this:<br />\r\n<img alt=\"\" src=\"/media/ckeditor/uploads/2021/01/24/2021-01-24_21h06_33.png\" style=\"height:248px; width:234px\" /></p>\r\n\r\n<p>Let&#39;s start with our models first.<br />\r\nCurrently, our models.py have 3 models:</p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">class Tag(models.Model):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; name = models.CharField(max_length=75, unique=True)</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; color = ColorField(unique=True)</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; def __str__(self):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return self.name</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">class Blog(models.Model):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; title = models.CharField(max_length=100, unique=True)</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; slug = models.SlugField(max_length=100, unique=True)</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; cover = models.ImageField(upload_to=&#39;blog_covers&#39;, null=True, blank=True)</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; content = RichTextUploadingField()</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; tags = models.ManyToManyField(Tag, through=&#39;BlogTag&#39;)</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; active = models.BooleanField(default=True)</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; created_by = models.ForeignKey(User, on_delete=models.SET_NULL, related_name=&#39;created_blogs&#39;, null=True)</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; updated_by = models.ForeignKey(User, on_delete=models.SET_NULL, related_name=&#39;updated_blogs&#39;, null=True)</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; created_at = models.DateTimeField(auto_now_add=True)</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; updated_at = models.DateTimeField(auto_now=True)</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; class Meta:</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ordering = [&#39;created_at&#39;]</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; default_related_name = &#39;blogs&#39;</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; def __str__(self):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return self.title</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; @property</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; def cover_name(self):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return os.path.basename(self.cover.url)</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">class BlogTag(models.Model):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; blog = models.ForeignKey(Blog, on_delete=models.CASCADE)</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; tag = models.ForeignKey(Tag, on_delete=models.CASCADE)</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; class Meta:</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; default_related_name = &#39;blog_tags&#39;</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unique_together = (&#39;blog&#39;, &#39;tag&#39;)</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; def __str__(self):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return self.tag.name</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; @property</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; def color(self):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return self.tag.color</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; @property</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; def name(self):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return self.tag.name</span></span></strong></p>\r\n\r\n<p>Since the following models are inheriting from Django&#39;s built-in class, we don&#39;t need to test the methods inside it.<br />\r\nWe will only test the methods that we defined. This is what our&nbsp;test_models.py will look like:</p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">from django.test import TestCase</span><br />\r\n<span style=\"background-color:#ecf0f1\">from blogs.models import Blog, Tag, BlogTag</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">class TestModels(TestCase):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;Unit test for blogs/models.py&quot;&quot;&quot;</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; def setUp(self):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.blog = Blog.objects.create(title=&#39;test title&#39;, slug=&#39;test-title&#39;, cover=&#39;test-cover.png&#39;, content=&#39;test-content&#39;)</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.tag = Tag.objects.create(name=&#39;test-tag&#39;, color=&#39;#FFFFFF&#39;)</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; def test_blog_str(self):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;Asserts that str of Blog object returns the value of title field&quot;&quot;&quot;</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.assertEqual(&#39;test title&#39;, self.blog.__str__())</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; def test_tag_str(self):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;Asserts that str of Tag object returns the value of name field&quot;&quot;&quot;</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.assertEqual(&#39;test-tag&#39;, self.tag.__str__())</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; def test_blog_tag_methods(self):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Asserts that methods of BlogTag objects is working correctly</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __str__: returns the value of name field in Tag</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; color: returns the value of color field in Tag</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; name: returns the value of name field in Tag</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.blog.tags.add(self.tag)</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; blog_tag = BlogTag.objects.get(blog__title=&#39;test title&#39;, tag__name=&#39;test-tag&#39;)</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.assertEqual(&#39;test-tag&#39;, blog_tag.__str__())</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.assertEqual(&#39;#FFFFFF&#39;, blog_tag.color)</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.assertEqual(&#39;test-tag&#39;, blog_tag.name)</span></span></strong><br />\r\n<br />\r\nWhat&#39;s happening on the code above?<br />\r\n<br />\r\nWe subclass&nbsp;from <strong>django.test import TestCase&nbsp;</strong>provided by Django.</p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">class TestModels(TestCase):</span></span></strong><br />\r\n<br />\r\nAs you can see our methods always start with the word &quot;test_&quot; followed by the description of what we are testing. It should always be named that way so Django can automatically detect it on running our tests.</p>\r\n\r\n<p>You can still create methods that don&#39;t start with &quot;test_&quot; but this won&#39;t be detected on running the test, Usually we define them when we have different logic that has been&nbsp;repeating on our test.<br />\r\n<br />\r\nThe <strong>setUp</strong> method is from the TestCase class this method is always executed first on every test method. We define the creating of Blog and Tag objects here instead of putting them on every test method.</p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; def setUp(self):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.blog = Blog.objects.create(title=&#39;test title&#39;,&nbsp;</span></span></strong><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">slug=&#39;test-title&#39;, cover=&#39;test-cover.png&#39;, content=&#39;test-content&#39;)</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.tag = Tag.objects.create(name=&#39;test-tag&#39;, color=&#39;#FFFFFF&#39;)</span></span></strong></p>\r\n\r\n<p><br />\r\nOn the first and second tests, we make sure that calling the __str__ method returns the proper value of the field.</p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; def test_blog_str(self):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;Asserts that str of Blog object returns the value of title field&quot;&quot;&quot;</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.assertEqual(&#39;test title&#39;, self.blog.__str__())</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; def test_tag_str(self):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;Asserts that str of Tag object returns the value of name field&quot;&quot;&quot;</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.assertEqual(&#39;test-tag&#39;, self.tag.__str__())</span></span></strong></p>\r\n\r\n<p>On the third test, we are checking that the following method __str__, color, and name returns our expected result.</p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; def test_blog_tag_methods(self):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Asserts that methods of BlogTag objects is working correctly</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __str__: returns the value of name field in Tag</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; color: returns the value of color field in Tag</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; name: returns the value of name field in Tag</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.blog.tags.add(self.tag)</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; blog_tag = BlogTag.objects.get(blog__title=&#39;test title&#39;, tag__name=&#39;test-tag&#39;)</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#2980b9\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.assertEqual(&#39;test-tag&#39;, blog_tag.__str__())</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.assertEqual(&#39;#FFFFFF&#39;, blog_tag.color)</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.assertEqual(&#39;test-tag&#39;, blog_tag.name)</span></span></strong></p>\r\n\r\n<p>Our tests for models are simple since we only have a small application.</p>\r\n\r\n<p>The command for running the test is <strong>python manage.py test&nbsp;&lt;app_name&gt;</strong>. The app_name is optional.&nbsp;If you don&#39;t specify the app_name it will run all the tests of the app. We can even test a specific Test Class or methods. We can use the dot notation for specifying what class or method we want. Here is an example:&nbsp;<strong>python manage.py test blogs.tests.test_models.TestModels.test_blog_str</strong></p>\r\n\r\n<p>Let&#39;s go ahead and try to run our test:<br />\r\n<img alt=\"\" src=\"/media/ckeditor/uploads/2021/01/25/2021-01-25_14h39_55.png\" style=\"height:204px; width:763px\" /><br />\r\nLooks like all the tests passed! Great, we can now move on for testing our views.</p>\r\n\r\n<p>blogs/views.py</p>\r\n\r\n<p><strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">class BlogListView(ListView):<br />\r\n&nbsp;&nbsp;&nbsp; template_name = &#39;blogs/blog_list.html&#39;<br />\r\n&nbsp;&nbsp;&nbsp; model = Blog<br />\r\n&nbsp;&nbsp;&nbsp; context_object_name = &#39;blogs&#39;<br />\r\n&nbsp;&nbsp;&nbsp; queryset = Blog.objects.filter(active=True)</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">class BlogDetailView(DetailView):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; template_name = &#39;blogs/blog_detail.html&#39;</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; model = Blog</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; context_object_name = &#39;blog&#39;</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; queryset = Blog.objects.filter(active=True)</span></span></strong></p>\r\n\r\n<p>We have 2 classes to test.</p>\r\n\r\n<p>Let&#39;s start on <strong>BlogListView:</strong></p>\r\n\r\n<p><strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">class TestViews(TestCase):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;Test Case for blogs/views.py&quot;&quot;&quot;</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; fixtures = [&#39;blogs/fixtures/test_views.json&#39;]</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; def test_blog_list_returns_status_200_and_context(self):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Asserts that BlogListView is returning status 200 on GET request</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; and returns context blog data</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; url = reverse(&#39;blogs:blog-list&#39;)</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; response = self.client.get(url)</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; blog_list_context = response.context[0][&#39;blogs&#39;]</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; blogs_qs = Blog.objects.filter(active=True).values()</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.assertEqual(200, response.status_code)</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.assertEqual(2, len(blog_list_context))</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for idx, blog in enumerate(blogs_qs):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.assertEqual(blog[&#39;title&#39;], getattr(blog_list_context[idx], &#39;title&#39;))</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.assertEqual(blog[&#39;slug&#39;], getattr(blog_list_context[idx], &#39;slug&#39;))</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.assertEqual(blog[&#39;content&#39;], getattr(blog_list_context[idx], &#39;content&#39;))</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; def test_blog_list_with_empty_data(self):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Asserts that BlogListView is returning status 200 on GET request</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; on empty queryset</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Blog.objects.all().delete()</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; url = reverse(&#39;blogs:blog-list&#39;)</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; response = self.client.get(url)</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.assertEqual(200, response.status_code)</span></span></strong><br />\r\n<br />\r\nFor testing our views we needed to create data for our blog&nbsp;to make it more effective. Luckily Django&#39;s testing module provides us an easy way to load initial data for our testing. We just need to create a JSON file and put it inside the fixtures directory under our app. after that&nbsp;we can call it on our Test Case like this:</p>\r\n\r\n<p><strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">class TestViews(TestCase):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;Test Case for blogs/views.py&quot;&quot;&quot;</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; fixtures = [&#39;blogs/fixtures/test_views.json&#39;]</span></span></strong><br />\r\n<br />\r\nHere is what the fixture looks like&nbsp;<strong>blogs/fixtures/test_views.json</strong></p>\r\n\r\n<pre>\r\n[\r\n  {\r\n    &quot;model&quot;: &quot;blogs.blog&quot;,\r\n    &quot;pk&quot;: 1,\r\n    &quot;fields&quot;: {\r\n      &quot;title&quot;: &quot;My First Blog&quot;,\r\n      &quot;slug&quot;: &quot;my-first-blog&quot;,\r\n      &quot;cover&quot;: &quot;&quot;,\r\n      &quot;content&quot;: &quot;&lt;p&gt;My First Blog Sample Content&lt;/p&gt;&quot;,\r\n      &quot;active&quot;: true,\r\n      &quot;created_by&quot;: null,\r\n      &quot;updated_by&quot;: null,\r\n      &quot;created_at&quot;: &quot;2021-01-23T02:20:26.167Z&quot;,\r\n      &quot;updated_at&quot;: &quot;2021-01-23T08:04:21.357Z&quot;\r\n    }\r\n  },\r\n  {\r\n    &quot;model&quot;: &quot;blogs.blog&quot;,\r\n    &quot;pk&quot;: 2,\r\n    &quot;fields&quot;: {\r\n      &quot;title&quot;: &quot;My Second Blog&quot;,\r\n      &quot;slug&quot;: &quot;my-second-blog&quot;,\r\n      &quot;cover&quot;: &quot;blog_covers/20201213_131915_p7ov8Mn.jpg&quot;,\r\n      &quot;content&quot;: &quot;&lt;p&gt;My Second Blog Sample Content&lt;/p&gt;&quot;,\r\n      &quot;active&quot;: true,\r\n      &quot;created_by&quot;: null,\r\n      &quot;updated_by&quot;: null,\r\n      &quot;created_at&quot;: &quot;2021-01-23T08:13:13.254Z&quot;,\r\n      &quot;updated_at&quot;: &quot;2021-01-23T08:13:13.255Z&quot;\r\n    }\r\n  },\r\n  {\r\n    &quot;model&quot;: &quot;blogs.blog&quot;,\r\n    &quot;pk&quot;: 3,\r\n    &quot;fields&quot;: {\r\n      &quot;title&quot;: &quot;My Inactive Blog&quot;,\r\n      &quot;slug&quot;: &quot;my-inactive-blog&quot;,\r\n      &quot;cover&quot;: &quot;blog_covers/20201213_131915_p7ov8Mn.jpg&quot;,\r\n      &quot;content&quot;: &quot;&lt;p&gt;This blog is inactive&lt;/p&gt;&quot;,\r\n      &quot;active&quot;: false,\r\n      &quot;created_by&quot;: null,\r\n      &quot;updated_by&quot;: null,\r\n      &quot;created_at&quot;: &quot;2021-01-23T08:13:13.254Z&quot;,\r\n      &quot;updated_at&quot;: &quot;2021-01-23T08:13:13.255Z&quot;\r\n    }\r\n  }\r\n]</pre>\r\n\r\n<p>We now have our initial data to make our test realistic.<br />\r\n<br />\r\nFor this time we will be using the client module built-in our TestCase class, This is super convenient because testing our views becomes a lot easier.&nbsp;We can pass in the path for the page we want to test and it will send a request to the specified URL&nbsp;and respond with Django&#39;s template response.<br />\r\n<strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; def test_blog_list_returns_status_200_and_context(self):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Asserts that BlogListView is returning status 200 on GET request</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; and returns context blog data</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; url = reverse(&#39;blogs:blog-list&#39;)&nbsp;</span></span></strong>#&nbsp;URL FOR ACCESSING VIEWS FOR BLOG<br />\r\n<strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; response = self.client.get(url)&nbsp;</span></span></strong># SEND REQUEST TO THE URL AND STORE THE RESPONSE<br />\r\n<strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; blog_list_context = response.context[0][&#39;blogs&#39;]&nbsp;</span></span></strong># STORE VALUE OF BLOGS FROM THE RESPONSE<br />\r\n<strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; blogs_qs = Blog.objects.filter(active=True).values()&nbsp;</span></span></strong># QUERY THE BLOGS FOR ASSERTION</p>\r\n\r\n<p><strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.assertEqual(200, response.status_code)&nbsp;</span></span></strong> # CHECK THAT THE PAGE IS OKAY<br />\r\n<strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.assertEqual(2, len(blog_list_context))&nbsp;</span></span></strong># CHECK LENGTH OF RETRIEVE BLOG POST</p>\r\n\r\n<p><strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for idx, blog in enumerate(blogs_qs):&nbsp;</span></span></strong># CHECK EACH FIELD VALUE OF BLOG POST<br />\r\n<strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.assertEqual(blog[&#39;title&#39;], getattr(blog_list_context[idx], &#39;title&#39;))&nbsp;</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.assertEqual(blog[&#39;slug&#39;], getattr(blog_list_context[idx], &#39;slug&#39;))</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.assertEqual(blog[&#39;content&#39;], getattr(blog_list_context[idx], &#39;content&#39;))</span></span></strong></p>\r\n\r\n<p>We now know that the page for accessing the blog post is working if the blog table has data. What if its empty? Will the page still work? Lets find out.<br />\r\n<strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; def test_blog_list_with_empty_data(self):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Asserts that BlogListView is returning status 200 on GET request</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; on empty queryset</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Blog.objects.all().delete()&nbsp;</span></span></strong># CLEAR THE BLOG TABLE DATABASE<br />\r\n<strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; url = reverse(&#39;blogs:blog-list&#39;)</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; response = self.client.get(url)</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.assertEqual(200, response.status_code)&nbsp;</span></span></strong># CHECK THAT THE PAGE IS OKAY</p>\r\n\r\n<p>Perfect! The page is also working with empty blog table.<br />\r\n<br />\r\nLet&#39;s now test our&nbsp;<strong>BlogDetailView</strong>:</p>\r\n\r\n<p><strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">def test_blog_detail_returns_status_200_and_context(self):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; Asserts that BlogDetailView is returning status 200 on GET request</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; and returns context blog data</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; blog = Blog.objects.get(slug=&#39;my-second-blog&#39;)&nbsp;</span></span></strong># QUERY BLOG FOR&nbsp; ASSERTION LATER<br />\r\n<strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; url = reverse(&#39;blogs:blog-detail&#39;, kwargs={&#39;slug&#39;: blog.slug})&nbsp;</span></span></strong>#&nbsp;URL FOR ACCESSING DETAIL VIEW OF BLOG<br />\r\n<strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; response = self.client.get(url)&nbsp;</span></span></strong># SEND REQUEST TO THE URL AND STORE THE RESPONSE<br />\r\n<strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; blog_context = response.context[0][&#39;blog&#39;]&nbsp;</span></span></strong>#&nbsp;STORE BLOG CONTEXT VALUE</p>\r\n\r\n<p><strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; self.assertEqual(200, response.status_code)&nbsp;</span></span></strong># CHECK THAT THE PAGE IS OKAY<br />\r\n<strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; self.assertEqual(blog.title, getattr(blog_context, &#39;title&#39;))</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; self.assertEqual(blog.slug, getattr(blog_context, &#39;slug&#39;))</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; self.assertEqual(blog.content, getattr(blog_context, &#39;content&#39;))</span></span></strong><br />\r\n<br />\r\nFor the last unit test. We are also testing that the pages returns 404 for an inactive or not existing blog.</p>\r\n\r\n<p><strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">def test_blog_detail_returns_status_404(self):</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;Asserts that BlogDetailView is returning status 404 for GET request with inactive/not existing slug&quot;&quot;&quot;</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; # for inactive blog</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; url = reverse(&#39;blogs:blog-detail&#39;, kwargs={&#39;slug&#39;: &#39;my-inactive-blog&#39;})</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; response1 = self.client.get(url)</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; self.assertEqual(404, response1.status_code)</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; # for not existing blog</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; url = reverse(&#39;blogs:blog-detail&#39;, kwargs={&#39;slug&#39;: &#39;not-existing-blog&#39;})</span><br />\r\n<span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; response1 = self.client.get(url)</span></span></strong></p>\r\n\r\n<p><strong><span style=\"color:#3498db\"><span style=\"background-color:#ecf0f1\">&nbsp;&nbsp;&nbsp; self.assertEqual(404, response1.status_code)</span></span></strong></p>\r\n\r\n<p>We now have fully tested our BlogDetailView for valid and invalid request.</p>\r\n\r\n<p><strong>Conclusion:</strong> Django&#39;s Test module is super powerful and really easy to implement, It provides us almost anything that we need. Remember that testing is always necessary for an application. It helps you and others debugging and maintaining your code and it eliminates repetitive manual testing!</p>\r\n\r\n<p>Interested In the code? Click&nbsp;<a href=\"https://github.com/aceaceace30/personal-website/tree/master/blogs/tests\" target=\"_blank\">here</a>.<br />\r\n<br />\r\nThank you for reading and see you again on the next blog post.&nbsp;<img alt=\"wink\" src=\"http://acedev30.pythonanywhere.com/static/ckeditor/ckeditor/plugins/smiley/images/wink_smile.png\" style=\"height:23px; width:23px\" title=\"wink\" /></p>", "active": true, "created_by": 1, "updated_by": 1, "created_at": "2021-01-24T10:26:26.438Z", "updated_at": "2021-02-01T15:07:45.522Z"}}, {"model": "blogs.blog", "pk": 4, "fields": {"title": "Deploying your Django Application to Heroku", "slug": "deploying-your-django-application-to-heroku", "cover": "blog_covers/django-heroku-deployment.jpg", "content": "<p><strong>Coming Soon ...</strong></p>", "active": false, "created_by": 1, "updated_by": 1, "created_at": "2021-01-25T13:19:02.379Z", "updated_at": "2021-01-27T04:03:53.143Z"}}, {"model": "blogs.blog", "pk": 5, "fields": {"title": "My Top 5 Anime songs when working out", "slug": "my-top-5-anime-songs-when-working-out", "cover": "blog_covers/top-5-anime.jpg", "content": "<p>Are you an Otaku that is searching for some hype music when working out?</p>\r\n\r\n<p>Here are my top 5 anime songs when doing exercise.</p>\r\n\r\n<p><strong>TOP 5: Gurenge by LiSa (Demon Slayer)</strong></p>\r\n\r\n<p>The intro of the song really motivates me to do high repetitions when doing a workout,&nbsp;reminds me of how Tanjiro trains hard to become a Demon Slayer and the chorus is so hyped you just want to keep ongoing.</p>\r\n\r\n<p><strong>TOP 4:&nbsp;Shinzou wo Sasageyo by Linked Horizon (Attack on Titan)</strong></p>\r\n\r\n<p>I always tend to go faster on my work out&nbsp;when this song comes on since the beat is really fast. Trying to remember Mikasa&#39;s cool scenes inspires me a lot. Sasageyo sasageyo!</p>\r\n\r\n<p><strong>TOP 3: Reluctant Heroes by NateWantsToBattle (Attack on Titan)</strong></p>\r\n\r\n<p>I always add more plates when this song comes on. Just&nbsp;remembering Levi&#39;s scenes while fighting titans with this music boosts my energy a lot.</p>\r\n\r\n<p><strong>TOP 2: Crossing Field by LiSa (Sword Art Online)</strong></p>\r\n\r\n<p>This song is perfect when I&#39;m feeling lazy on doing Ab workout&nbsp;because it&#39;s&nbsp;really chill, helps me maintain my composure on doing planks and sit ups.</p>\r\n\r\n<p><strong>TOP 1:&nbsp;Silhouette by KANA-BOON (Naruto)</strong></p>\r\n\r\n<p>Classic right?&nbsp;<img alt=\"wink\" src=\"http://acedev30.pythonanywhere.com/static/ckeditor/ckeditor/plugins/smiley/images/wink_smile.png\" style=\"height:23px; width:23px\" title=\"wink\" /><br />\r\nI think I don&#39;t need an explanation for this one. I just find this really good at any part of my workout routine.<br />\r\n<br />\r\nLet&#39;s have a healthy mind and body! Thank you for reading!</p>", "active": true, "created_by": 1, "updated_by": 1, "created_at": "2021-01-27T04:03:13.813Z", "updated_at": "2021-02-01T15:09:33.136Z"}}, {"model": "blogs.blogtag", "pk": 5, "fields": {"blog": 2, "tag": 7}}, {"model": "blogs.blogtag", "pk": 6, "fields": {"blog": 3, "tag": 1}}, {"model": "blogs.blogtag", "pk": 7, "fields": {"blog": 3, "tag": 2}}, {"model": "blogs.blogtag", "pk": 8, "fields": {"blog": 4, "tag": 1}}, {"model": "blogs.blogtag", "pk": 9, "fields": {"blog": 4, "tag": 2}}, {"model": "blogs.blogtag", "pk": 10, "fields": {"blog": 4, "tag": 8}}, {"model": "blogs.blogtag", "pk": 11, "fields": {"blog": 5, "tag": 9}}, {"model": "blogs.blogtag", "pk": 12, "fields": {"blog": 5, "tag": 10}}]